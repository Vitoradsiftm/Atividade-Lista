#include <stdio.h>

struct Node {
    int value;
    Node* next;

    Node(int _value) {
        value = _value;
        next = NULL;
    }
};

struct List {
    Node* start;
    Node* end;
    int s;

    List() {
        start = NULL;
        end = NULL;
        s = 0;
    }

    bool empty() {
        return start == NULL && end == NULL;
    }

    void pushBack(int value) {
        Node* n = new Node(value);
        s++;
        if (empty()) {
            start = n;
            end = n;
            return;
        }
        end->next = n;
        end = n;
    }

    void pushFront(int value) {
        Node* n = new Node(value);
        s++;
        if (empty()) {
            start = n;
            end = n;
            return;
        }
        n->next = start;
        start = n;
    }

    void print() {
        Node* aux = start;
        while (aux != NULL) {
            printf("%d -> ", aux->value);
            aux = aux->next;
        }
        printf("\n");
    }

    int size() {
        return s;
    }

    void popFront() {
        if (empty()) return;

        if (size() == 1) {
            delete(start);
            start = NULL;
            end = NULL;
            s = 0;
            return;
        }

        Node *aux = start;
        start = start->next;
        delete(aux);
        s--;
    }

    void popBack() {
        if (empty()) return;

        if (size() == 1) {
            delete(start);
            start = NULL;
            end = NULL;
            s = 0;
            return;
        }

        Node *aux = start;
        while (aux->next != end) {
            aux = aux->next;
        }

        delete(end);
        end = aux;
        end->next = NULL;
        s--;
    }

    void insert(int v, int p) {
        if (p <= 0) {
            pushFront(v);
            return;
        }

        if (p >= s) {
            pushBack(v);
            return;
        }

        Node *n = new Node(v);
        s++;

        Node *a = start;
        for (int i = 0; i < p - 1; i++) {
            a = a->next;
        }

        n->next = a->next;
        a->next = n;
    }

    // 1. Remove os N últimos elementos da lista
    void removerUltimosN(int n) {
        if (n < s) {
            Node *aux = start;
            for (int i = 0; i < s - n - 1; i++) {
                aux = aux->next;
            }
            Node* atual = aux->next;
            aux->next = NULL;
            end = aux;
            while (atual != NULL) {
                Node* temp = atual;
                atual = atual->next;
                delete(temp);
            }
            s -= n;
        } else {
            while (!empty()) {
                popFront();
            }
        }
    }

    // 2. Remove o segundo elemento da lista
    void removerSegundo() {
        if (s <= 1) return;
        if (s == 2) {
            popBack();
            return;
        }
        Node *second = start->next;
        start->next = second->next;
        delete(second);
        s--;
    }

    // 3. Insere no final da lista o tamanho atual dela
    void inserirTamanhoAtual() {
        pushBack(s);
    }

    // 4. Insere de 1 até N na lista
    void inserirDeUmAteN(int n) {
        for (int i = 1; i <= n; i++) {
            pushBack(i);
        }
    }

    // 5. Insere um elemento na penúltima posição
    void inserirNaPenultima(int v) {
        if (s <= 1) return;
        insert(v, s - 1);
    }
};

int main() {
    List l;

    l.pushFront(10);
    l.pushFront(3);
    l.pushBack(3);
    l.pushFront(8);
    l.pushBack(50);
    l.pushFront(78);
    l.pushBack(1);
    l.pushBack(75);
    l.pushFront(25);
    l.pushBack(60);
    l.pushFront(34);
    l.pushBack(80);
    l.pushBack(30);
    l.pushBack(23);
    l.pushFront(5);
    l.pushFront(66);
    l.insert(5, 9);

    printf("Lista original:\n");
    l.print();

    // Teste da função 1
    l.removerUltimosN(5);
    printf("Após remover os 5 últimos:\n");
    l.print();

    // Teste da função 2
    l.removerSegundo();
    printf("Após remover o segundo elemento:\n");
    l.print();

    // Teste da função 3
    l.inserirTamanhoAtual();
    printf("Após inserir o tamanho atual no final:\n");
    l.print();

    // Teste da função 4
    l.inserirDeUmAteN(5);
    printf("Após inserir de 1 até 5:\n");
    l.print();

    // Teste da função 5
    l.inserirNaPenultima(999);
    printf("Após inserir 999 na penúltima posição:\n");
    l.print();

    return 0;
}
